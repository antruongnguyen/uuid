name: Release

on:
  push:
    tags:
      - 'v*'

# Explicitly define permissions needed for GitHub releases
permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

  build-release:
    name: Build Release - ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: uuid
            asset_name: uuid-${{ needs.create-release.outputs.version }}-x86_64-linux
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: uuid
            asset_name: uuid-${{ needs.create-release.outputs.version }}-aarch64-linux
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: uuid
            asset_name: uuid-${{ needs.create-release.outputs.version }}-x86_64-macos
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: uuid
            asset_name: uuid-${{ needs.create-release.outputs.version }}-aarch64-macos
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: uuid.exe
            asset_name: uuid-${{ needs.create-release.outputs.version }}-x86_64-windows
          - os: windows-latest
            target: i686-pc-windows-msvc
            artifact_name: uuid.exe
            asset_name: uuid-${{ needs.create-release.outputs.version }}-i686-windows

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: runner.os == 'Linux' && matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Install cross-compilation tools for ARM64
        if: runner.os == 'Linux' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          # Install cross tool for Rust cross-compilation
          cargo install cross
          # Note: Cross.toml in the repository root configures cross to install Python3 in the container

      - name: Build target (ARM64 Linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cross build --release --target ${{ matrix.target }} --no-default-features

      - name: Build target (All other platforms)
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact [Windows]
        if: matrix.os == 'windows-latest'
        run: |
          mkdir dist
          copy target\${{ matrix.target }}\release\${{ matrix.artifact_name }} dist\
          cd dist
          7z a -tzip ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          certutil -hashfile ${{ matrix.asset_name }}.zip SHA256 > ${{ matrix.asset_name }}.sha256

      - name: Prepare artifact [Unix]
        if: matrix.os != 'windows-latest'
        run: |
          mkdir dist
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} dist/
          cd dist
          tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          shasum -a 256 ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.sha256

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.os == 'windows-latest' && format('dist/{0}.zip', matrix.asset_name) || format('dist/{0}.tar.gz', matrix.asset_name) }}
            dist/${{ matrix.asset_name }}.sha256
          retention-days: 1

  # Create the release with all artifacts
  create-github-release:
    name: Create GitHub Release
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List Artifacts
        run: find artifacts -type f | sort

      - name: Prepare Release Assets
        run: |
          mkdir -p release-assets
          # Copy all artifacts to a flat directory structure while ensuring unique filenames
          for file in $(find artifacts -type f); do
            # Extract the artifact name (directory name) and filename
            artifact_name=$(basename $(dirname "$file"))
            filename=$(basename "$file")

            # If the file is already named with the artifact name (like uuid-1.0.0-x86_64-linux.tar.gz),
            # just copy it directly, otherwise prefix it with the artifact name
            if [[ "$filename" == *"$artifact_name"* ]]; then
              cp "$file" "release-assets/$filename"
            else
              # This handles files like .sha256 that might have the same name across different artifacts
              cp "$file" "release-assets/${artifact_name}-${filename}"
            fi
          done

          # List files in release-assets directory
          ls -la release-assets/

      # Create package manager assets
      - name: Create Homebrew Formula
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          mkdir -p dist

          # Create Homebrew formula
          echo "Creating Homebrew formula..."
          
          # Find macOS binary artifacts and their SHA256 files
          X86_64_MACOS_TARBALL=$(find release-assets -name "*x86_64-macos.tar.gz")
          X86_64_MACOS_SHA256_FILE=$(find release-assets -name "*x86_64-macos*.sha256")
          ARM64_MACOS_TARBALL=$(find release-assets -name "*aarch64-macos.tar.gz")
          ARM64_MACOS_SHA256_FILE=$(find release-assets -name "*aarch64-macos*.sha256")
          
          # Find Linux binary artifacts and their SHA256 files
          X86_64_LINUX_TARBALL=$(find release-assets -name "*x86_64-linux.tar.gz")
          X86_64_LINUX_SHA256_FILE=$(find release-assets -name "*x86_64-linux*.sha256")
          ARM64_LINUX_TARBALL=$(find release-assets -name "*aarch64-linux.tar.gz")
          ARM64_LINUX_SHA256_FILE=$(find release-assets -name "*aarch64-linux*.sha256")
          
          # Extract SHA256 checksums from the .sha256 files
          echo "Extracting SHA256 checksums for macOS binaries..."
          if [ -n "$X86_64_MACOS_SHA256_FILE" ]; then
            SHA256_X86_64_MACOS=$(cat "$X86_64_MACOS_SHA256_FILE" | grep -o -E '[0-9a-f]{64}' | head -1)
            if [ -z "$SHA256_X86_64_MACOS" ]; then
              echo "Failed to extract SHA256 checksum for x86_64 macOS binary. Exiting."
              exit 1
            fi
          else
            echo "SHA256 file for x86_64 macOS binary not found. Exiting."
            exit 1
          fi
          
          if [ -n "$ARM64_MACOS_SHA256_FILE" ]; then
            SHA256_ARM64_MACOS=$(cat "$ARM64_MACOS_SHA256_FILE" | grep -o -E '[0-9a-f]{64}' | head -1)
            if [ -z "$SHA256_ARM64_MACOS" ]; then
              echo "Failed to extract SHA256 checksum for ARM64 macOS binary. Exiting."
              exit 1
            fi
          else
            echo "SHA256 file for ARM64 macOS binary not found. Exiting."
            exit 1
          fi
          
          echo "Extracting SHA256 checksums for Linux binaries..."
          if [ -n "$X86_64_LINUX_SHA256_FILE" ]; then
            SHA256_X86_64_LINUX=$(cat "$X86_64_LINUX_SHA256_FILE" | grep -o -E '[0-9a-f]{64}' | head -1)
            if [ -z "$SHA256_X86_64_LINUX" ]; then
              echo "Failed to extract SHA256 checksum for x86_64 Linux binary. Exiting."
              exit 1
            fi
          else
            echo "SHA256 file for x86_64 Linux binary not found. Exiting."
            exit 1
          fi
          
          if [ -n "$ARM64_LINUX_SHA256_FILE" ]; then
            SHA256_ARM64_LINUX=$(cat "$ARM64_LINUX_SHA256_FILE" | grep -o -E '[0-9a-f]{64}' | head -1)
            if [ -z "$SHA256_ARM64_LINUX" ]; then
              echo "Failed to extract SHA256 checksum for ARM64 Linux binary. Exiting."
              exit 1
            fi
          else
            echo "SHA256 file for ARM64 Linux binary not found. Exiting."
            exit 1
          fi
          
          cat > release-assets/uuid.rb << EOF
          class Uuid < Formula
            desc "A CLI tool to generate UUID v1, v3, v4, v5, v6, v7, and v8"
            homepage "https://github.com/${{ github.repository }}"
            license "MIT"
            
            on_macos do
              on_arm do
                url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/uuid-${VERSION}-aarch64-macos.tar.gz"
                sha256 "${SHA256_ARM64_MACOS}"
              end
              
              on_intel do
                url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/uuid-${VERSION}-x86_64-macos.tar.gz"
                sha256 "${SHA256_X86_64_MACOS}"
              end
            end
            
            on_linux do
              on_arm do
                url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/uuid-${VERSION}-aarch64-linux.tar.gz"
                sha256 "${SHA256_ARM64_LINUX}"
              end
              
              on_intel do
                url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/uuid-${VERSION}-x86_64-linux.tar.gz"
                sha256 "${SHA256_X86_64_LINUX}"
              end
            end
            
            def install
              bin.install "uuid"
            end

            test do
              assert_match /[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/, shell_output("#{bin}/uuid")
            end
          end
          EOF

      - name: Create Scoop Manifest
        run: |
          VERSION=${{ needs.create-release.outputs.version }}

          # Find Windows zip files and their SHA256 files in release-assets
          X86_64_ZIP=$(find release-assets -name "*x86_64-windows.zip")
          X86_64_SHA256_FILE=$(find release-assets -name "*x86_64-windows*.sha256")
          I686_ZIP=$(find release-assets -name "*i686-windows.zip")
          I686_SHA256_FILE=$(find release-assets -name "*i686-windows*.sha256")

          # Extract SHA256 checksums from the .sha256 files
          echo "Extracting SHA256 checksums from existing files..."
          if [ -n "$X86_64_SHA256_FILE" ]; then
            # Different OS might format the SHA256 file differently
            # Windows (certutil): SHA256 hash of file.zip:
            #                     hash_value
            # Unix (shasum): hash_value file.tar.gz
            # We need to extract just the hash value
            SHA256_64=$(cat "$X86_64_SHA256_FILE" | grep -o -E '[0-9a-f]{64}' | head -1)
            if [ -z "$SHA256_64" ]; then
              echo "Failed to extract SHA256 checksum from x86_64 Windows SHA256 file. Exiting."
              exit 1
            fi
          else
            echo "SHA256 file for x86_64 Windows zip not found. Exiting."
            exit 1
          fi

          # Note: i686 Windows build is commented out in the matrix, so we'll use a placeholder
          # If i686 build is enabled, this should be updated to use the actual file
          SHA256_32="$SHA256_64"  # Using x86_64 hash as a fallback
          if [ -n "$I686_SHA256_FILE" ]; then
            SHA256_32=$(cat "$I686_SHA256_FILE" | grep -o -E '[0-9a-f]{64}' | head -1)
            if [ -z "$SHA256_32" ]; then
              echo "Failed to extract SHA256 checksum from i686 Windows SHA256 file. Using x86_64 hash as fallback."
              SHA256_32="$SHA256_64"
            fi
          fi

          # Create Scoop manifest
          echo "Creating Scoop manifest..."
          cat > release-assets/uuid.json << EOF
          {
              "version": "${VERSION}",
              "description": "A CLI tool to generate UUID v1, v3, v4, v5, v6, v7, and v8",
              "homepage": "https://github.com/${{ github.repository }}",
              "license": "MIT",
              "architecture": {
                  "64bit": {
                      "url": "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/uuid-${VERSION}-x86_64-windows.zip",
                      "hash": "${SHA256_64}"
                  },
                  "32bit": {
                      "url": "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/uuid-${VERSION}-i686-windows.zip",
                      "hash": "${SHA256_32}"
                  }
              },
              "bin": "uuid.exe",
              "checkver": "github",
              "autoupdate": {
                  "architecture": {
                      "64bit": {
                          "url": "https://github.com/${{ github.repository }}/releases/download/v\$version/uuid-\$version-x86_64-windows.zip"
                      },
                      "32bit": {
                          "url": "https://github.com/${{ github.repository }}/releases/download/v\$version/uuid-\$version-i686-windows.zip"
                      }
                  }
              }
          }
          EOF


      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          path: |
            release-assets/uuid.rb
            release-assets/uuid.json
          retention-days: 1

      - name: Create Release
        uses: ncipollo/release-action@v1.18.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          name: ${{ github.ref_name }}
          artifacts: "release-assets/*"
          allowUpdates: true
          omitBodyDuringUpdate: true
          skipIfReleaseExists: false
          generateReleaseNotes: true

  # Update Homebrew tap
  update-homebrew-tap:
    name: Update Homebrew Tap
    needs: [create-release, create-github-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Checkout homebrew-uuid repository
        uses: actions/checkout@v4
        with:
          repository: antruongnguyen/homebrew-uuid
          token: ${{ secrets.PAT_TOKEN }}
          path: homebrew-uuid

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          path: homebrew-artifacts

      - name: Copy Homebrew formula from artifacts
        run: |
          # Find the uuid.rb file in the artifacts
          UUID_RB_FILE=$(find homebrew-artifacts -name "uuid.rb" | head -1)
          
          if [ -n "$UUID_RB_FILE" ]; then
            # Copy the uuid.rb file to the homebrew-uuid repository
            cp "$UUID_RB_FILE" homebrew-uuid/uuid.rb
            echo "Copied uuid.rb from release artifacts"
          else
            echo "Error: uuid.rb file not found in release artifacts"
            exit 1
          fi

      - name: Maintain README for homebrew-uuid
        run: |
          # Copy README template if it doesn't exist or update it
          if [ ! -f homebrew-uuid/README.md ]; then
            cp homebrew-uuid-README.md homebrew-uuid/README.md
            echo "Created README.md for homebrew-uuid repository"
          else
            # Update README if needed (copy template to maintain consistency)
            cp homebrew-uuid-README.md homebrew-uuid/README.md
            echo "Updated README.md for homebrew-uuid repository"
          fi

      - name: Commit and push Homebrew formula
        run: |
          cd homebrew-uuid
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add uuid.rb README.md
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update uuid to version ${{ needs.create-release.outputs.version }}"
            git tag -a "v${{ needs.create-release.outputs.version }}" -m "Update uuid to version ${{ needs.create-release.outputs.version }}"
            git push origin main
            git push origin --tags
          fi

  # Update Scoop bucket
  update-scoop-bucket:
    name: Update Scoop Bucket
    needs: [create-release, create-github-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Checkout scoop-uuid repository
        uses: actions/checkout@v4
        with:
          repository: antruongnguyen/scoop-uuid
          token: ${{ secrets.PAT_TOKEN }}
          path: scoop-uuid

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          path: scoop-artifacts

      - name: Copy Scoop manifest from artifacts
        run: |
          # Find the uuid.json file in the artifacts
          UUID_JSON_FILE=$(find scoop-artifacts -name "uuid.json" | head -1)
          
          if [ -n "$UUID_JSON_FILE" ]; then
            # Copy the uuid.json file to the scoop-uuid repository
            cp "$UUID_JSON_FILE" scoop-uuid/uuid.json
            echo "Copied uuid.json from release artifacts"
          else
            echo "Error: uuid.json file not found in release artifacts"
            exit 1
          fi

      - name: Maintain README for scoop-uuid
        run: |
          # Copy README template if it doesn't exist or update it
          if [ ! -f scoop-uuid/README.md ]; then
            cp scoop-uuid-README.md scoop-uuid/README.md
            echo "Created README.md for scoop-uuid repository"
          else
            # Update README if needed (copy template to maintain consistency)
            cp scoop-uuid-README.md scoop-uuid/README.md
            echo "Updated README.md for scoop-uuid repository"
          fi

      - name: Commit and push Scoop manifest
        run: |
          cd scoop-uuid
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add uuid.json README.md
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update uuid to version ${{ needs.create-release.outputs.version }}"
            git tag -a "v${{ needs.create-release.outputs.version }}" -m "Update uuid to version ${{ needs.create-release.outputs.version }}"
            git push origin main
            git push origin --tags
          fi
